function useRegex(input) {
    let regex = /([01]\d|2[0-3]):[0-5]\d:[0-5]\d/;
    return regex.test(input);
}

$(document).ready(function () {
    function applyTagColors(text) {
        const tagColors = {
            "^0": "#FFFFFF", "^1": "#FF4B4B", "^2": "#A3C500", "^3": "#FFB84D",
            "^4": "#009FDF", "^5": "#00C0FF", "^6": "#BD84D1", "^7": "#B2B2B2",
            "^8": "#D90000", "^9": "#CC0077"
        };

        return text.replace(/(\^(0|1|2|3|4|5|6|7|8|9))/g, function (match, p1, p2) {
            const color = tagColors[`^${p2}`];
            return `<span style="color: ${color}">`;
        }) + '</span>'.repeat((text.match(/(\^(0|1|2|3|4|5|6|7|8|9))/g) || []).length);
    }

    function updatePadding() {
        let paddingValue = lastFontSize * 0.65; 
        $(".generated").css({
            "padding-top": paddingValue + "px",
            "padding-bottom": paddingValue + "px",
            "padding-left": paddingValue + "px",
            "padding-right": paddingValue + "px"
        });
    }

    function updateOutput() {
        $(".generated").remove();
        $(".clear").remove();

        const lines = $("textarea").val().replace("<script>", "").replace("</script>", "").split("\n");

        lines.forEach(line => {
            const textLine = useRegex(line) ? line.slice(11) : line.slice(0);
            const coloredLine = applyTagColors(textLine);
            const outputLine = `<div class="generated" id="chatlogOutput">${coloredLine}</div><div class="clear"></div>`;
            $(".output").append(outputLine);
        });

        $(".generated").each(function () {
            let txtString = $(this).text().toLowerCase();

            if (navigator.userAgent.indexOf("Chrome") !== -1) {
                $(this).append(" â €");
            }

            if (txtString.includes("*") || txtString.includes(">")) {
                $(this).addClass("me");
            }

            if (txtString.includes("* (dice roll)") || txtString.includes("* (coin flip)") || txtString.includes("* (rps)")) {
                $(this).addClass("roll");
            }

            if (txtString.includes(" says:")) {
                $(this).addClass("white");
            } else if (txtString.includes(" says (low):") || txtString.includes(" says (low to")) {
                $(this).addClass("grey");
            }

            if (txtString.includes("you have paid $") || txtString.includes("you have received") || txtString.includes("you gave") || txtString.includes("paid you $") || txtString.includes("you received") ) {
                $(this).addClass("money");
            }

            if (txtString.includes("you can die")) {
                $(this).addClass("death");
            }

            if (txtString.includes("(combat)")) {
                $(this).addClass("combat");
            }

            if (txtString.includes(" whispers:")) {
                $(this).addClass("whisper");
            }
            if (txtString.includes("(character kill)")) {
                let parts = txtString.split("(character kill)");
                let characterInfo = parts[1].trim();
            
                if (characterInfo.includes("has been character killed.")) {
                    let splitInfo = characterInfo.split("has been character killed.");
                    let characterName = splitInfo[0].trim();
            
                    let formattedCharacterName = characterName.split(' ').map(word => 
                        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                    ).join(' ');
            
                    let killedPhrase = "has been character killed.";
            
                    let newContent = `
                        <span class="combat">(Character Kill)</span>${formattedCharacterName ? ' ' + '<span class="white">' + formattedCharacterName + ' ' + killedPhrase + '</span>' : ''}
                    `;
                    $(this).html(newContent);
                } else {
                    let characterName = characterInfo.split(' ').map(word => 
                        word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()
                    ).join(' ');
            
                    let newContent = `
                        <span class="combat">(Character Kill)</span>${characterName ? ' ' + '<span class="white">' + characterName + '</span>' : ''}
                    `;
                    $(this).html(newContent);
                }
            }
            
            
        });

        updatePadding();

        $(".generated:first").css("margin-top", "30px").css("padding-top", "10px");
        $(".generated:last").css("padding-bottom", "10px").css("margin-bottom", "30px");
        $(".generated").css("background-color", "#" + $("#color-picker").spectrum("get").toHex());
    }

    let charName = $("#name").val().toLowerCase();
    let lastCharName = $.jStorage.get("lastCharName") || "";
    $("#name").val(lastCharName);

    $("#name").bind("input propertychange", function () {
        charName = $("#name").val().toLowerCase();
        $.jStorage.set("lastCharName", charName);
        updateOutput();
    });

    let lastFontSize = $.jStorage.get("lastFontSize") || 12;
    $(".output").css("font-size", lastFontSize + "px");
    updatePadding();

    $("#decrease-fontsize").click(function () {
        lastFontSize--;
        if (lastFontSize < 0) lastFontSize = 0;
        $(".output").css("font-size", lastFontSize + "px");
        $.jStorage.set("lastFontSize", lastFontSize);
        updatePadding();
    });

    $("#increase-fontsize").click(function () {
        lastFontSize++;
        $(".output").css("font-size", lastFontSize + "px");
        $.jStorage.set("lastFontSize", lastFontSize);
        updatePadding();
    });

    $("#reset-fontsize").click(function () {
        lastFontSize = 12;
        $(".output").css("font-size", "12px");
        $.jStorage.set("lastFontSize", lastFontSize);
        updatePadding();
    });

    $("textarea").bind("input propertychange", function () {
        updateOutput();
    });

    $("#color-picker").spectrum({
        color: "#000",
        showInput: true,
        preferredFormat: "hex",
        change: function () {
            const color = $("#color-picker").spectrum("get").toHex();
            $.jStorage.set("lastColor", color);
            $(".generated").css("background-color", "#" + color);
        },
    });

    $("#color-picker").spectrum("set", $.jStorage.get("lastColor") || "#000");
});
